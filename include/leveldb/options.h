// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <stddef.h>
#include "leveldb/export.h"

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.

/*
 * 键值存在一系列的blocks中，每个block在存储前
 * 都可以被压缩。压缩方法：目前仅仅支持不压缩和snappy压缩
 *
 */
enum CompressionType {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  kNoCompression     = 0x0,
  kSnappyCompression = 0x1
};

// Options to control the behavior of a database (passed to DB::Open)
/*
 *
 * 控制数据库行为的选项
 */
struct LEVELDB_EXPORT Options {
  // -------------------
  // Parameters that affect behavior

  // Comparator used to define the order of keys in the table.
  // Default: a comparator that uses lexicographic byte-wise ordering
  //
  // REQUIRES: The client must ensure that the comparator supplied
  // here has the same name and orders keys *exactly* the same as the
  // comparator provided to previous open calls on the same DB.
  /*
   * 决定table中key排序的顺序，默认按照key的字母顺序排序。
   *
   * client必须保证，该comparator与之前打开数据库的调用
   * 使用相同name和排序的comparator
   */
  const Comparator* comparator;

  // If true, the database will be created if it is missing.
  // Default: false
  /*
   * 不存在时创建该数据库
   */
  bool create_if_missing;

  // If true, an error is raised if the database already exists.
  // Default: false
  /*
   * 数据库存在时，抛出错误
   */
  bool error_if_exists;

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.
  // Default: false
  /*
   * ？？？？
   *
   */
  bool paranoid_checks;

  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  Env* env;

  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-null, or to a file stored
  // in the same directory as the DB contents if info_log is null.
  // Default: nullptr
  /*
   * 提供了logger,数据库内部的进度和错误信息会被记录到logger中，
   * 或者记录到相同目录下的
   */
  Logger* info_log;

  // -------------------
  // Parameters that affect performance

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  //
  // Larger values increase performance, especially during bulk loads.
  // Up to two write buffers may be held in memory at the same time,
  // so you may wish to adjust this parameter to control memory usage.
  // Also, a larger write buffer will result in a longer recovery time
  // the next time the database is opened.
  //
  // Default: 4MB
  /*
   * 影响性能的参数。
   * 在转换为磁盘上排序的数据库文件前，在内存中构造的数据缓存（磁盘上未排序的
   * log支持）。
   * 值越大，性能越好，特别是在批量加载时。
   *
   */
  size_t write_buffer_size;

  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set (budget
  // one open file per 2MB of working set).
  //
  // Default: 1000
  /*
   * 数据库可以打开的文件句柄数目
   */
  int max_open_files;

  // Control over blocks (user data is stored in a set of blocks, and
  // a block is the unit of reading from disk).

  // If non-null, use the specified cache for blocks.
  // If null, leveldb will automatically create and use an 8MB internal cache.
  // Default: nullptr
  /*
   * 非null, 使用内存缓存blocks;
   * null，数据库会自动创建并使用一个8MB的内部缓存。（默认）
   *
   */
  Cache* block_cache;

  // Approximate size of user data packed per block.  Note that the
  // block size specified here corresponds to uncompressed data.  The
  // actual size of the unit read from disk may be smaller if
  // compression is enabled.  This parameter can be changed dynamically.
  //
  // Default: 4K
  /*
   * 每个block中用户数据的近似大小（未压缩前）。实际从磁盘读出的数据单位会偏小，因为压缩
   * 存在。可以动态改变，默认4K。block是从磁盘读取的基本单位
   *
   */
  size_t block_size;

  // Number of keys between restart points for delta encoding of keys.
  // This parameter can be changed dynamically.  Most clients should
  // leave this parameter alone.
  //
  // Default: 16
  /*
   * 键增量编码重启点的键数目。可以动态改变，默认16
   */
  int block_restart_interval;

  // Leveldb will write up to this amount of bytes to a file before
  // switching to a new one.
  // Most clients should leave this parameter alone.  However if your
  // filesystem is more efficient with larger files, you could
  // consider increasing the value.  The downside will be longer
  // compactions and hence longer latency/performance hiccups.
  // Another reason to increase this parameter might be when you are
  // initially populating a large database.
  //
  // Default: 2MB
  /*
   * 每个数据库文件的大小限制，默认2MB。
   *
   *
   */
  size_t max_file_size;

  // Compress blocks using the specified compression algorithm.  This
  // parameter can be changed dynamically.
  //
  // Default: kSnappyCompression, which gives lightweight but fast
  // compression.
  //
  // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  //    ~200-500MB/s compression
  //    ~400-800MB/s decompression
  // Note that these speeds are significantly faster than most
  // persistent storage speeds, and therefore it is typically never
  // worth switching to kNoCompression.  Even if the input data is
  // incompressible, the kSnappyCompression implementation will
  // efficiently detect that and will switch to uncompressed mode.
  /*
   * 压缩数据块算法，该参数可以动态改变，默认KSnappy压缩。
   *
   */
  CompressionType compression;

  // EXPERIMENTAL: If true, append to existing MANIFEST and log files
  // when a database is opened.  This can significantly speed up open.
  //
  // Default: currently false, but may become true later.
  bool reuse_logs;

  // If non-null, use the specified filter policy to reduce disk reads.
  // Many applications will benefit from passing the result of
  // NewBloomFilterPolicy() here.
  //
  // Default: nullptr
  /*
   * 过滤策略：
   * 非null, 使用特殊的过滤策略来减少读磁盘数。
   *
   */
  const FilterPolicy* filter_policy;

  // Create an Options object with default values for all fields.
  /*
   * 默认值的Options
   *
   *
   */
  Options();
};

// Options that control read operations

/*
 *
 * 读选项
 */
struct LEVELDB_EXPORT ReadOptions {
  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  // Default: false
  /*
   *
   * 从存储上读出的数据要验证checksums
   */
  bool verify_checksums;

  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  // Default: true
  /*
   *
   * 读上来的数据是否填充到内存的缓存里
   */
  bool fill_cache;

  // If "snapshot" is non-null, read as of the supplied snapshot
  // (which must belong to the DB that is being read and which must
  // not have been released).  If "snapshot" is null, use an implicit
  // snapshot of the state at the beginning of this read operation.
  // Default: nullptr
  /*
   * 非null,读取所提供的快照（该快照必须隶属于要读取的数据库，并且没有被释放）
   * null, 读取前，使用一个隐式快照
   */
  const Snapshot* snapshot;

  /*
   * 默认：不校验checksum, 填充cache
   *
   */
  ReadOptions()
      : verify_checksums(false),
        fill_cache(true),
        snapshot(nullptr) {
  }
};

// Options that control write operations
/*
 *
 * 写选项
 */
struct LEVELDB_EXPORT WriteOptions {
  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  //
  // Default: false
  /*
   * 写到底，操作系统缓存要刷下去，才返回写完成，影响写性能。
   * 类似于：
   * 1）false: write
   * 2) true:  write, fsync
   *
   */
  bool sync;

  WriteOptions()
      : sync(false) {       // 默认false
  }
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
